<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>org.example</groupId>
    <artifactId>RestAssuredCucumberHybridFramework</artifactId>
    <version>1.0-SNAPSHOT</version>

    <properties>
        <maven.compiler.source>11</maven.compiler.source>
        <maven.compiler.target>11</maven.compiler.target>
        <cucumber.version>7.0.0</cucumber.version>
        <cucumber.testng.version>7.11.0</cucumber.testng.version>
        <google.guice.version>5.1.0</google.guice.version>
        <cucumber.guice.version>7.6.0</cucumber.guice.version>
        <maven.compiler.version>3.6.2</maven.compiler.version>
        <io.rest-assured.version>5.3.2</io.rest-assured.version>
        <json.path.version>2.8.0</json.path.version>
        <extentreports.version>5.1.1</extentreports.version>
        <jsonassert.version>1.5.0</jsonassert.version>
        <owner.java8.version>1.0.12</owner.java8.version>
        <lombok.version>1.18.24</lombok.version>
        <datafaker.version>1.5.0</datafaker.version>
        <wiremock.version>3.2.0</wiremock.version>
        <dbunit.version>2.7.2</dbunit.version>
        <spring.test.dbunit.version>1.3.0</spring.test.dbunit.version>
        <postgres.version>42.6.0</postgres.version>
        <json.schema.validator>5.2.0</json.schema.validator>
        <log4j.core.version>2.19.0</log4j.core.version>
        <log4j.slf4j.impl.version>2.19.0</log4j.slf4j.impl.version>
        <gson.version>2.11.0</gson.version>
    </properties>

    <dependencies>

        <dependency>
            <groupId>io.cucumber</groupId>
            <artifactId>cucumber-java</artifactId>
            <version>${cucumber.version}</version>
        </dependency>

        <dependency>
            <groupId>io.cucumber</groupId>
            <artifactId>cucumber-testng</artifactId>
            <version>${cucumber.testng.version}</version>
        </dependency>

        <!-- DI - Scenarios context    -->
        <dependency>
            <groupId>com.google.inject</groupId>
            <artifactId>guice</artifactId>
            <version>${google.guice.version}</version>
        </dependency>

        <dependency>
            <groupId>io.cucumber</groupId>
            <artifactId>cucumber-guice</artifactId>
            <version>${cucumber.guice.version}</version>
        </dependency>

        <!-- Rest assured library  -->
        <dependency>
            <groupId>io.rest-assured</groupId>
            <artifactId>rest-assured</artifactId>
            <version>${io.rest-assured.version}</version>
        </dependency>

        <dependency>
            <groupId>io.rest-assured</groupId>
            <artifactId>json-schema-validator</artifactId>
            <version>${json.schema.validator}</version>
        </dependency>

<!--        to replace particular json value with respect to json path-->
        <dependency>
            <groupId>com.jayway.jsonpath</groupId>
            <artifactId>json-path</artifactId>
            <version>${json.path.version}</version>
        </dependency>

<!--        Report generation library-->
        <dependency>
            <groupId>com.aventstack</groupId>
            <artifactId>extentreports</artifactId>
            <version>${extentreports.version}</version>
        </dependency>

<!--        assert json with strict or ignoring fields-->
        <dependency>
            <groupId>org.skyscreamer</groupId>
            <artifactId>jsonassert</artifactId>
            <version>${jsonassert.version}</version>
        </dependency>

        <!-- to read config -->
        <dependency>
            <groupId>org.aeonbits.owner</groupId>
            <artifactId>owner-java8</artifactId>
            <version>${owner.java8.version}</version>
        </dependency>

        <!-- annotation helper with other helper annotations-->
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <version>${lombok.version}</version>
        </dependency>

        <!-- assist in creating fake data -->
        <dependency>
            <groupId>net.datafaker</groupId>
            <artifactId>datafaker</artifactId>
            <version>${datafaker.version}</version>
        </dependency>

        <!-- Wiremock       -->
        <dependency>
            <groupId>org.wiremock</groupId>
            <artifactId>wiremock</artifactId>
            <version>${wiremock.version}</version>
        </dependency>

        <!--    DB ops    -->
        <dependency>
            <groupId>org.dbunit</groupId>
            <artifactId>dbunit</artifactId>
            <version>${dbunit.version}</version>
        </dependency>

        <dependency>
            <groupId>com.github.springtestdbunit</groupId>
            <artifactId>spring-test-dbunit</artifactId>
            <version>${spring.test.dbunit.version}</version>
        </dependency>

        <dependency>
            <groupId>org.postgresql</groupId>
            <artifactId>postgresql</artifactId>
            <version>${postgres.version}</version>
        </dependency>

<!--        Logging         -->
        <!-- log4j -->
        <dependency>
            <groupId>org.apache.logging.log4j</groupId>
            <artifactId>log4j-core</artifactId>
            <version>${log4j.core.version}</version>
        </dependency>

        <!-- SLF4J Bridge -->
        <dependency>
            <groupId>org.apache.logging.log4j</groupId>
            <artifactId>log4j-slf4j-impl</artifactId>
            <version>${log4j.slf4j.impl.version}</version>
        </dependency>

        <!-- used to read data from json for test context[not used for scenario context] -->
        <dependency>
            <groupId>com.google.code.gson</groupId>
            <artifactId>gson</artifactId>
            <version>${gson.version}</version>
        </dependency>


        <!--        <dependency>-->
<!--            <groupId>org.springframework.boot</groupId>-->
<!--            <artifactId>spring-boot-starter-jdbc</artifactId>-->
<!--            <version>2.5.5</version>-->
<!--        </dependency>-->

    </dependencies>

    <profiles>
        <profile>
            <id>functional-test-executioner</id>
            <build>
                <plugins>
                    <plugin>
                        <!-- Included so that we can execute test from command line, but the runner name should be end or start with test-->
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-surefire-plugin</artifactId>
                        <version>3.2.2</version>
                        <configuration>
                            <parallel>methods</parallel>
                            <threadCount>1</threadCount>
                            <perCoreThreadCount>true</perCoreThreadCount>
                        </configuration>
                    </plugin>
                </plugins>
            </build>
        </profile>
    </profiles>

</project>